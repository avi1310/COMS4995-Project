#include <iostream>

#include "ImgLibrary.h"

using namespace std;
using namespace imglib;

void display( uint8_t luma )
{
    static std::vector<char> ascii{
        ' ', '.', ',', ':', '-', '=', '+', '*', '#', '%', '@'
        };

    int val = luma / 24;
    std::cout << ascii[val] << ascii[val];
}

int main( int argc, char* argv[] )
{
    if ( argc < 2 )
    {
        std::cout << "No jpeg file specified\n";
        return 1;
    }
    try 
    {
 
        ImgLibrary testImg1(argv[1]);

//        testImg1.flipHorizontal();
//        testImg1.save("flip.jpeg");
//        testImg1.flipVertical();
//        testImg1.save("fVert.jpeg");
//        testImg1.blur();
//        testImg1.save("blur.jpeg");
//       testImg1.resize(400);
//        testImg1.save("resized.jpeg");
//
       // testImg1.masking(200, 500, 200, 200);
//        testImg1.save("mask.jpeg");
       // testImg1.contrastMod(2.3);
//        testImg1.save("contrast.jpeg");
       // testImg1.brightnessMod(20);
//        testImg1.save("brightness.jpeg");
//        testImg1.grayScale();
        testImg1.padding(50);
          testImg1.rotateAntiClockwise().rotateClockwise().rotate180().rotate180().padding(16).save("output1.jpg");
            // testImg1.edgeDetection().save("output.jpg");
        // testImg1.flipVertical().save("output.jpg");


//        testImg1.edgeDetection();
       // testImg1.save("edgeDetection.jpeg");
//          testImg1.luminanceScaling(2);
//          testImg1.save("luminanceScaling.jpeg");


    catch( const std::exception& e )
    {
        std::cout << "Main() error handler: ";
        std::cout << e.what() << std::endl;
        return 1;
    }
}
